#!/bin/bash
# Script para configurar/reconfigurar Homer Dashboard

set -euo pipefail

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Obtener dominio del .env
if [ -f .env ]; then
    DOMAIN=$(grep "HEIMDALL_DOMAIN=" .env | cut -d'=' -f2 | sed 's/dashboard\.//')
else
    error "Archivo .env no encontrado"
fi

log "Configurando Homer Dashboard para dominio: $DOMAIN"

# Funci√≥n para configurar Homer
configure_homer() {
    if [ ! -f "configs/homer/config.yml" ]; then
        error "Archivo de configuraci√≥n Homer no encontrado"
    fi
    
    # Crear backup del config original
    cp configs/homer/config.yml configs/homer/config.yml.backup
    
    # Aplicar configuraci√≥n de dominio
    chmod +x configs/homer/configure.sh
    configs/homer/configure.sh configs/homer/config.yml "$DOMAIN"
    
    # Reiniciar Homer para cargar nueva configuraci√≥n
    if docker compose ps homer | grep -q "running"; then
        log "Reiniciando Homer..."
        docker compose restart homer
    fi
    
    log "¬°Homer configurado correctamente!"
    info "Accede a: http://dashboard.$DOMAIN"
}

# Funci√≥n para mostrar servicios configurados
show_services() {
    echo
    info "=== SERVICIOS CONFIGURADOS EN HOMER ==="
    echo "üè† Dashboard: http://dashboard.$DOMAIN"
    echo
    echo "üì∫ Core Services:"
    echo "  üé¨ Jellyfin: http://jellyfin.$DOMAIN"
    echo "  üîÑ Syncthing: http://sync.dashboard.$DOMAIN"
    echo
    echo "üì∏ Photos & Media:"
    echo "  üì∏ Immich: http://fotos.$DOMAIN"
    echo
    echo "üìä Monitoring:"
    echo "  üìä Netdata: http://metrics.$DOMAIN"
    echo "  ‚è∞ Uptime Kuma: http://status.$DOMAIN"
    echo "  üìà Grafana: http://grafana.$DOMAIN"
    echo
    echo "ÔøΩÔ∏è Network & Security:"
    echo "  üõ°Ô∏è  AdGuard: http://adguard.$DOMAIN"
    echo "  üîê Vault: http://vault.$DOMAIN"
    echo
    echo "‚öôÔ∏è Management & Files:"
    echo "  üê≥ Docker: http://docker.$DOMAIN"
    echo "  ÔøΩ Files: http://files.$DOMAIN"
    echo "  ÔøΩ Backup: http://backup.$DOMAIN"
    echo
    info "Servicios organizados por categor√≠as con iconos modernos"
}

# Funci√≥n de ayuda
show_help() {
    echo "Uso: $0 [opciones]"
    echo
    echo "Opciones:"
    echo "  configure    Configurar/reconfigurar Homer"
    echo "  reset        Resetear configuraci√≥n a valores por defecto"
    echo "  show         Mostrar servicios configurados"
    echo "  edit         Editar configuraci√≥n manualmente"
    echo "  -h, --help   Mostrar esta ayuda"
}

# Funci√≥n para resetear configuraci√≥n
reset_config() {
    warn "¬øEst√°s seguro de que quieres resetear la configuraci√≥n de Homer? [y/N]"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        log "Reseteando configuraci√≥n..."
        if [ -f "configs/homer/config.yml.backup" ]; then
            cp configs/homer/config.yml.backup configs/homer/config.yml
        fi
        configure_homer
    else
        info "Operaci√≥n cancelada"
    fi
}

# Funci√≥n para editar configuraci√≥n
edit_config() {
    info "Editando configuraci√≥n de Homer..."
    ${EDITOR:-nano} configs/homer/config.yml
    
    warn "¬øReiniciar Homer para aplicar cambios? [y/N]"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        docker compose restart homer
        log "Homer reiniciado"
    fi
}

# Parsear argumentos
case "${1:-configure}" in
    configure)
        configure_homer
        show_services
        ;;
    reset)
        reset_config
        ;;
    show)
        show_services
        ;;
    edit)
        edit_config
        ;;
    -h|--help)
        show_help
        ;;
    *)
        error "Opci√≥n desconocida: $1. Usa -h para ver la ayuda."
        ;;
esac
